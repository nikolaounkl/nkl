{"version":3,"sources":["contexts/ThemeContext.js","components/HeroNavbar.js","components/Hero.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","props","_useState","useState","darkMode","_useState2","Object","slicedToArray","theme","setTheme","react_default","a","createElement","Provider","value","objectSpread","toggleTheme","children","HeroNavbar","_useContext","useContext","icon","className","onClick","Hero","components_HeroNavbar","App","contexts_ThemeContext","components_Hero","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2LAEaA,EAAeC,0BAkBbC,EAhBc,SAAAC,GAAS,IAAAC,EACVC,mBAAS,CACjCC,UAAU,IAFwBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC7BM,EAD6BH,EAAA,GACtBI,EADsBJ,EAAA,GASpC,OACEK,EAAAC,EAAAC,cAACd,EAAae,SAAd,CAAuBC,MAAKR,OAAAS,EAAA,EAAAT,CAAA,GAAME,EAAN,CAAaQ,YALvB,WAClBP,EAAS,CAAEL,UAAWI,EAAMJ,eAKzBH,EAAMgB,WCaEC,EAzBI,WAAM,IAAAC,EACaC,qBAAWtB,GAArCM,EADae,EACbf,SAAUY,EADGG,EACHH,YACZK,EAAOjB,EACP,0CACA,uCACN,OACIM,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACXZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACXZ,EAAAC,EAAAC,cAAA,UAAQU,UAAU,UACdZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,gBACXZ,EAAAC,EAAAC,cAAA,QAAMU,UAAU,eACZZ,EAAAC,EAAAC,cAAA,MAAIU,UAAU,aAAd,SAGRZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,eACXZ,EAAAC,EAAAC,cAAA,QAAMU,UAAU,OAAOC,QAASP,GAC5BN,EAAAC,EAAAC,cAAA,KAAGU,UAAWD,UCM3BG,EArBF,WAAM,IAEThB,EADeY,qBAAWtB,GAAxBM,SAEF,8BACA,8BACN,OACIM,EAAAC,EAAAC,cAAA,WAASU,UAAWd,GAChBE,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACXZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,+BACXZ,EAAAC,EAAAC,cAAA,KAAGU,UAAU,gCACbZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIU,UAAU,SAAd,WACAZ,EAAAC,EAAAC,cAAA,MAAIU,UAAU,YAAd,0BCJLI,MAVf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAACe,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d5a98a06.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = props => {\r\n  const [theme, setTheme] = useState({\r\n    darkMode: true\r\n  });\r\n\r\n  const toggleTheme = () => {\r\n    setTheme({ darkMode: !theme.darkMode});\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{...theme, toggleTheme}}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ThemeContextProvider;\r\n\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\n\r\nconst HeroNavbar = () => {\r\n    const { darkMode, toggleTheme } = useContext(ThemeContext);\r\n    const icon = darkMode\r\n        ? \"fas fa-radiation fa-lg has-text-warning\"\r\n        : \"fas fa-radiation fa-lg has-text-dark\";\r\n    return (\r\n        <div className=\"hero-head\">\r\n            <div className=\"container\">\r\n                <header className=\"navbar\">\r\n                    <div className=\"navbar-brand\">\r\n                        <span className=\"navbar-item\">\r\n                            <h1 className=\"is-size-4\">NKL</h1>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"navbar-item\">\r\n                        <span className=\"icon\" onClick={toggleTheme}>\r\n                            <i className={icon} />\r\n                        </span>\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeroNavbar;\r\n","import React, { useContext } from \"react\";\r\nimport HeroNavbar from \"./HeroNavbar\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\n\r\nconst Hero = () => {\r\n    const { darkMode } = useContext(ThemeContext);\r\n    const theme = darkMode\r\n        ? \"hero is-black is-fullheight\"\r\n        : \"hero is-white is-fullheight\";\r\n    return (\r\n        <section className={theme}>\r\n            <HeroNavbar />\r\n            <div className=\"hero-body\">\r\n                <div className=\"container has-text-centered\">\r\n                    <i className=\"fas fa-user-astronaut fa-4x\" />\r\n                    <br />\r\n                    <br />\r\n                    <h1 className=\"title\">Welcome</h1>\r\n                    <h2 className=\"subtitle\">to my react planet</h2>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Hero;\r\n","import React from 'react';\r\nimport Hero from './components/Hero';\r\nimport ThemeContextProvider from './contexts/ThemeContext'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeContextProvider>\r\n        <Hero />\r\n      </ThemeContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bulma/css/bulma.min.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}